p.value <- c(p.value, x.pv[,imp_matrix$Feature[f]])
gain <- c(gain, imp_matrix$Gain[f])
cover <- c(cover, imp_matrix$Cover[f])
rank <- c(rank, f)
}
}
x.master <- data.frame(feature, SNPs, strains, cor_given, cor_actual, gain, cover, rank, p.value)
View(x.master)
rows <- c(seq(30, 90, 30),seq(100, 1000, 100))
cor <- c(seq(0.1, 0.9, 0.1))
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
core.f <- c("feature.1$", "feature.2$")
v.names <- c("feature", "SNPs", "strains", "cor_given", "cor_actual", "p.value", "gain", "cover", "rank")
for (i in 1:length(v.names)){
assign(v.names[i], numeric())
}
n <- 0 #use to capture all length(x) of new_cor
new_cor <- rep(cor, length(x)/length(cor))
for (num in 1:length(x)) {
featNum <- NULL #this index needs to reset
imp_matrix <- importance_matrix[[num]]
x.iter <- x[[num]]
# x.pv <- getPV(x[[num]])
for (i in 1:2){
if (length(grep(core.f[i], imp_matrix$Feature)) == 0){
featNum <- c(featNum, i)
} else {
featNum <- c(featNum, grep(core.f[i], imp_matrix$Feature)) #get feature numbers{1,2} INDEX from each matrix
}
}
n <-  n + 1 #use to capture all length(x) of new_cor
for(i in 1:2){
f <- featNum[i]
feature<-c(feature, imp_matrix$Feature[f])
SNPs <-c(SNPs, 100)
strains <- c(strains, nrow(x.iter))
cor_given <- c(cor_given, new_cor[n])
cor_actual <-c(cor_actual, cor(x.iter[,1],x.iter[,grep(paste(imp_matrix$Feature[f], "$", sep = ""), colnames(x.iter), perl = TRUE)]))
p.value <- c(p.value, x.pv[,imp_matrix$Feature[f]])
gain <- c(gain, imp_matrix$Gain[f])
cover <- c(cover, imp_matrix$Cover[f])
rank <- c(rank, f)
}
}
x.master <- data.frame(feature, SNPs, strains, cor_given, cor_actual, gain, cover, rank, p.value)
View(x.master)
View(x.master)
rows <- c(seq(30, 90, 30),seq(100, 1000, 100))
cor <- c(seq(0.1, 0.9, 0.1))
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
core.f <- c("feature.1$", "feature.2$")
v.names <- c("feature", "SNPs", "strains", "cor_given", "cor_actual", "p.value", "gain", "cover", "rank")
for (i in 1:length(v.names)){
assign(v.names[i], numeric())
}
n <- 0 #use to capture all length(x) of new_cor
new_cor <- rep(cor, length(x)/length(cor))
for (num in 1:length(x)) {
featNum <- NULL #this index needs to reset
imp_matrix <- importance_matrix[[num]]
x.iter <- x[[num]]
x.pv <- getPV(x[[num]])
for (i in 1:2){
if (length(grep(core.f[i], imp_matrix$Feature)) == 0){
featNum <- c(featNum, i)
} else {
featNum <- c(featNum, grep(core.f[i], imp_matrix$Feature)) #get feature numbers{1,2} INDEX from each matrix
}
}
n <-  n + 1 #use to capture all length(x) of new_cor
for(i in 1:2){
f <- featNum[i]
feature<-c(feature, imp_matrix$Feature[f])
SNPs <-c(SNPs, 100)
strains <- c(strains, nrow(x.iter))
cor_given <- c(cor_given, new_cor[n])
cor_actual <-c(cor_actual, cor(x.iter[,1],x.iter[,grep(paste(imp_matrix$Feature[f], "$", sep = ""), colnames(x.iter), perl = TRUE)]))
p.value <- c(p.value, x.pv[,imp_matrix$Feature[f]])
gain <- c(gain, imp_matrix$Gain[f])
cover <- c(cover, imp_matrix$Cover[f])
rank <- c(rank, f)
}
}
x.master <- data.frame(feature, SNPs, strains, cor_given, cor_actual, gain, cover, rank, p.value)
View(x.master)
runXg(x[[1]])
runXg(x[[2]])
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
core.f <- c("feature.1$", "feature.2$")
v.names <- c("feature", "SNPs", "strains", "cor_given", "cor_actual", "p.value", "gain", "cover", "rank")
for (i in 1:length(v.names)){
assign(v.names[i], numeric())
}
n <- 0 #use to capture all length(x) of new_cor
new_cor <- rep(cor, length(x)/length(cor))
for (num in 1:length(x)) {
featNum <- NULL #this index needs to reset
imp_matrix <- importance_matrix[[num]]
x.iter <- x[[num]]
x.pv <- getPV(x[[num]])
for (i in 1:2){
if (length(grep(core.f[i], imp_matrix$Feature)) == 0){
featNum <- c(featNum, i)
} else {
featNum <- c(featNum, grep(core.f[i], imp_matrix$Feature)) #get feature numbers{1,2} INDEX from each matrix
}
}
n <-  n + 1 #use to capture all length(x) of new_cor
for(i in 1:2){
f <- featNum[i]
feature<-c(feature, imp_matrix$Feature[f])
SNPs <-c(SNPs, 100)
strains <- c(strains, nrow(x.iter))
cor_given <- c(cor_given, new_cor[n])
cor_actual <-c(cor_actual, cor(x.iter[,1],x.iter[,grep(paste(imp_matrix$Feature[f], "$", sep = ""), colnames(x.iter), perl = TRUE)]))
p.value <- c(p.value, x.pv[,imp_matrix$Feature[f]])
gain <- c(gain, imp_matrix$Gain[f])
cover <- c(cover, imp_matrix$Cover[f])
rank <- c(rank, f)
}
}
View(x.master)
runXg(x[[1]])
x.master <- data.frame(feature, SNPs, strains, cor_given, cor_actual, gain, cover, rank, p.value)
View(x.master)
runXg(x[[1]])
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
core.f <- c("feature.1$", "feature.2$") #correlated features
v.names <- c("feature", "SNPs", "strains", "cor_given", "cor_actual", "p.value", "gain", "cover", "rank")
for (i in 1:length(v.names)){
assign(v.names[i], numeric())
}
n <- 0 #use to capture all length(x) of new_cor
new_cor <- rep(cor, length(x)/length(cor))
for (num in 1:length(x)) {
featNum <- NULL #this index needs to reset
imp_matrix <- importance_matrix[[num]]
x.iter <- x[[num]]
x.pv <- getPV(x[[num]])
#check presence of any core.f[i]
for (i in 1:2){
if (length(grep(core.f[i], imp_matrix$Feature)) == 0){
featNum <- c(featNum, i)
cat(featNum)
} else {
featNum <- c(featNum, grep(core.f[i], imp_matrix$Feature)) #get feature numbers{1,2} INDEX from each matrix
}
}
n <-  n + 1 #use to capture all length(x) of new_cor
for(i in 1:2){
f <- featNum[i]
feature<-c(feature, imp_matrix$Feature[f])
SNPs <-c(SNPs, 100)
strains <- c(strains, nrow(x.iter))
cor_given <- c(cor_given, new_cor[n])
cor_actual <-c(cor_actual, cor(x.iter[,1],x.iter[,grep(paste(imp_matrix$Feature[f], "$", sep = ""), colnames(x.iter), perl = TRUE)]))
p.value <- c(p.value, x.pv[,imp_matrix$Feature[f]])
gain <- c(gain, imp_matrix$Gain[f])
cover <- c(cover, imp_matrix$Cover[f])
rank <- c(rank, f)
}
}
x.master <- data.frame(feature, SNPs, strains, cor_given, cor_actual, gain, cover, rank, p.value)
View(x.master)
cat("hi")
cat("hi", sep = "\n")
cat("hi","low", sep = "\n")
cat("hi","low", "\n")
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
core.f <- c("feature.1$", "feature.2$") #correlated features
v.names <- c("feature", "SNPs", "strains", "cor_given", "cor_actual", "p.value", "gain", "cover", "rank")
for (i in 1:length(v.names)){
assign(v.names[i], numeric())
}
n <- 0 #use to capture all length(x) of new_cor
new_cor <- rep(cor, length(x)/length(cor))
for (num in 1:length(x)) {
featNum <- NULL #this index needs to reset
imp_matrix <- importance_matrix[[num]]
x.iter <- x[[num]]
x.pv <- getPV(x[[num]])
#check presence of any core.f[i]
for (i in 1:2){
if (length(grep(core.f[i], imp_matrix$Feature)) == 0){
featNum <- c(featNum, i)
} else {
featNum <- c(featNum, grep(core.f[i], imp_matrix$Feature)) #get feature numbers{1,2} INDEX from each matrix
}
cat("Feature: ", imp_matrix$Feature[featNum])
cat("\n")
}
n <-  n + 1 #use to capture all length(x) of new_cor
for(i in 1:2){
f <- featNum[i]
feature<-c(feature, imp_matrix$Feature[f])
SNPs <-c(SNPs, 100)
strains <- c(strains, nrow(x.iter))
cor_given <- c(cor_given, new_cor[n])
cor_actual <-c(cor_actual, cor(x.iter[,1],x.iter[,grep(paste(imp_matrix$Feature[f], "$", sep = ""), colnames(x.iter), perl = TRUE)]))
p.value <- c(p.value, x.pv[,imp_matrix$Feature[f]])
gain <- c(gain, imp_matrix$Gain[f])
cover <- c(cover, imp_matrix$Cover[f])
rank <- c(rank, f)
}
}
rows <- c(seq(30, 90, 30),seq(100, 1000, 100))
cor <- c(seq(0.1, 0.9, 0.1))
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
core.f <- c("feature.1$", "feature.2$") #correlated features
v.names <- c("feature", "SNPs", "strains", "cor_given", "cor_actual", "p.value", "gain", "cover", "rank")
for (i in 1:length(v.names)){
assign(v.names[i], numeric())
}
n <- 0 #use to capture all length(x) of new_cor
new_cor <- rep(cor, length(x)/length(cor))
for (num in 1:length(x)) {
featNum <- NULL #this index needs to reset
imp_matrix <- importance_matrix[[num]]
x.iter <- x[[num]]
x.pv <- getPV(x[[num]])
#check presence of any core.f[i]
for (i in 1:2){
if (length(grep(core.f[i], imp_matrix$Feature)) == 0){
featNum <- c(featNum, i)
} else {
featNum <- c(featNum, grep(core.f[i], imp_matrix$Feature)) #get feature numbers{1,2} INDEX from each matrix
}
}
cat("Feature: ", imp_matrix$Feature[featNum])
cat("\n")
n <-  n + 1 #use to capture all length(x) of new_cor
for(i in 1:2){
f <- featNum[i]
feature<-c(feature, imp_matrix$Feature[f])
SNPs <-c(SNPs, 100)
strains <- c(strains, nrow(x.iter))
cor_given <- c(cor_given, new_cor[n])
cor_actual <-c(cor_actual, cor(x.iter[,1],x.iter[,grep(paste(imp_matrix$Feature[f], "$", sep = ""), colnames(x.iter), perl = TRUE)]))
p.value <- c(p.value, x.pv[,imp_matrix$Feature[f]])
gain <- c(gain, imp_matrix$Gain[f])
cover <- c(cover, imp_matrix$Cover[f])
rank <- c(rank, f)
}
}
x.master <- data.frame(feature, SNPs, strains, cor_given, cor_actual, gain, cover, rank, p.value)
View(x.master)
runXg(x[[5]])
ifelse(length(grep(core.f[i], imp_matrix$Feature)) == 0, cat("yes"), cat("no"))
ifelse(length(grep(core.f, imp_matrix$Feature)) == 0, cat("yes"), cat("no"))
ifelse(length(grep(core.f[1], imp_matrix$Feature)) == 0, cat("yes"), cat("no"))
View(imp_matrix)
ifelse(length(grep(core.f[1], imp_matrix$Feature)) == 0, yes, no)
ifelse(length(grep(core.f[1], imp_matrix$Feature)) == 0, print(0), print(0))
ifelse(length(grep(core.f, imp_matrix$Feature)) == 0, print(0), print(0))
ifelse(length(grep(core.f[1], imp_matrix$Feature)) == 0, print(0), print(0))
ifelse(length(grep(core.f[1], imp_matrix$Feature)) == 0, print(0), print(1))
imp_matrix <- runXg(x[[5]])
View(imp_matrix)
ifelse(length(grep(core.f[1], imp_matrix$Feature)) == 0, print(0), print(1))
#ifelse(length(grep(core.f[1], imp_matrix$Feature)) == 0, )
featNum <- NULL
rows <- c(seq(30, 90, 30),seq(100, 1000, 100))
cor <- c(seq(0.1, 0.9, 0.1))
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
core.f <- c("feature.1$", "feature.2$") #correlated features
v.names <- c("feature", "SNPs", "strains", "cor_given", "cor_actual", "p.value", "gain", "cover", "rank")
for (i in 1:length(v.names)){
assign(v.names[i], numeric())
}
n <- 0 #use to capture all length(x) of new_cor
new_cor <- rep(cor, length(x)/length(cor))
for (num in 1:length(x)) {
featNum <- NULL #this index needs to reset
imp_matrix <- importance_matrix[[num]]
x.iter <- x[[num]]
x.pv <- getPV(x[[num]])
#check presence of any core.f[i]
#problem: if core.f[1] is not in imp_matrix but core.f[2] is, then it will be duplicated
for (i in 1:2){
if (length(grep(core.f[i], imp_matrix$Feature)) == 0){
featNum <- c(featNum, i)
} else {
featNum <- c(featNum, grep(core.f[i], imp_matrix$Feature)) #get feature numbers{1,2} INDEX from each matrix
}
}
cat("Feature: ", imp_matrix$Feature[featNum])
cat("\n")
n <-  n + 1 #use to capture all length(x) of new_cor
for(i in 1:2){
f <- featNum[i]
feature<-c(feature, imp_matrix$Feature[f])
SNPs <-c(SNPs, 100)
strains <- c(strains, nrow(x.iter))
cor_given <- c(cor_given, new_cor[n])
cor_actual <-c(cor_actual, cor(x.iter[,1],x.iter[,grep(paste(imp_matrix$Feature[f], "$", sep = ""), colnames(x.iter), perl = TRUE)]))
p.value <- c(p.value, x.pv[,imp_matrix$Feature[f]])
gain <- c(gain, imp_matrix$Gain[f])
cover <- c(cover, imp_matrix$Cover[f])
rank <- c(rank, f)
}
}
View(x.master)
source("~/qiulab/cdg-data/cdg-data-functions.R")
rows <- c(seq(30, 90, 30),seq(100, 1000, 100))
cor <- c(seq(0.1, 0.9, 0.1))
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
source("~/qiulab/cdg-data/cdg-data-functions.R")
rows <- c(seq(30, 90, 30),seq(100, 1000, 100))
cor <- c(seq(0.1, 0.9, 0.1))
x <- list()
importance_matrix <- list()
k <- 0
for (i in 1:length(rows)){
for (j in 1:length(cor)){
k <- k + 1
x[[k]] <- getSimulated(cor[j], cor[j], rows[i], 100)
importance_matrix[[k]] <- runXg(x[[k]])
}
}
x.master <- getTable(x = x, importance_matrix = importance_matrix, cor = cor)
View(x.master)
cdg <- read.csv("cdgTable.csv2", header = T, na.strings = T)
genes <- read.csv("cdgSNPmatrix-Jinyuan.csv3", header = F, row.names = 1)
cdg <- read.csv("~/qiulab/cdg-data/data/cdgTable.csv2", header = T, na.strings = T)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv3", header = F, row.names = 1)
cdg <- read.csv("~/qiulab/cdg/data/cdgTable.csv2", header = T, na.strings = T)
header <- read.csv("~/qiulab/cdg/data/header.csv", sep = ",", header = F)
View(cdg)
View(genes)
genes1 <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv4", header = F, row.names = 1)
genes1 <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv2", header = F, row.names = 1)
genes2 <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv5", header = F, row.names = 1)
View(genes1)
View(genes)
View(genes1)
genes1 <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv2", header = T, row.names = 1)
View(genes1)
genes2 <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv5", header = F, row.names = 1)
View(genes2)
genes <- read.csv("~/qiulab/cdg/data/genes-pythonver.csv", header = T, row.names = 1)
View(genes)
View(genes)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv3", header = F, row.names = 1)
View(genes)
cdg <- read.csv("~/qiulab/cdg/data/cdgTable.csv2", header = T, na.strings = T)
header <- read.csv("~/qiulab/cdg/data/header.csv", sep = ",", header = F)
cdg.mean <- tapply(cdg$logcdg, cdg$strains, mean)
cdg.norm <- (cdg.mean - min(cdg.mean))/(max(cdg.mean) - min(cdg.mean))
genes <- read.csv("~/qiulab/cdg/data/test.csv2", header = F, row.names = 1)
genes <- read.csv("~/qiulab/cdg/data/test.csv2", header = F)
View(genes)
genes <- read.csv("~/qiulab/cdg/data/test.csv", header = F)
View(genes)
genes <- read.csv("~/qiulab/cdg/data/cdg.norm.csv", header = F)
View(genes)
cdg <- read.csv("~/qiulab/cdg/data/cdgTable.csv2", header = T, na.strings = T)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv3", header = F, row.names = 1)
View(genes)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv5", header = F, row.names = 1)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv3", header = F, row.names = 1)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv5", header = F, row.names = 1)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-Jinyuan.csv", header = F, row.names = 1)
View(genes)
genes <- read.csv("~/qiulab/cdg/data/gene-1.snp.csv", header = F)
View(genes)
setwd("~/qiulab/cdg/data/")
genes <- read.csv("cdgSNPmatrix-reduced.csv", header = F, row.names = 1)
cdg <- read.csv("cdgTable.csv2", header = T, na.strings = T)
header <- read.csv("header.csv", sep = ",", header = F)
cdg.mean <- tapply(cdg$logcdg, cdg$strains, mean)
cdg.norm <- (cdg.mean - mean(cdg.mean))/(sd(cdg.mean))
cdg.norm
scale(cdg.mean)
cdg.mean <- tapply(cdg$logcdg, cdg$strains, mean)
cdg.norm <- scale(cdg.mean)
View(cdg.norm)
cdg <- read.csv("~/qiulab/cdg/data/cdgTable.csv2", header = T, na.strings = T)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-reduced.csv", header = F, row.names = 1)
header <- read.csv("~/qiulab/cdg/data/header.csv", sep = ",", header = F)
colnames(genes) <- as.character(as.matrix(header[-1]))
snps <- t(genes)
cdg.mean <- tapply(cdg$logcdg, cdg$strains, mean)
t <- as.matrix(ifelse(cdg.mean[row.names(snps)] < -1, 0,1 ))
snps <- cbind(t, snps)
View(snps)
cdg <- read.csv("~/qiulab/cdg/data/cdgTable.csv2", header = T, na.strings = T)
genes <- read.csv("~/qiulab/cdg/data/cdgSNPmatrix-reduced.csv", header = F, row.names = 1)
header <- read.csv("~/qiulab/cdg/data/header.csv", sep = ",", header = F)
colnames(genes) <- as.character(as.matrix(header[-1]))
snps <- t(genes)
cdg.mean <- tapply(cdg$logcdg, cdg$strains, mean)
t <- as.matrix(ifelse(cdg.mean[row.names(snps)] < -1, 0,1 )) #create categorical target variables w/ threshold 0.5
snps <- cbind(t, snps)
w <- runif(1078, 1e-3, 1e-2)
b <- runif(1)
eta <- 0.1
weights <- matrix(0,nrow = 1000, ncol = 1078) #equivalent to # of SNP position/state
accuracy <- numeric()
for(epoch in 1:1000){
a <- snps[,2:1079] %*% w #activation
y <- 1/(1+exp(-a-b)) #output
e <- snps[,1] - y #backpropogation
w <- w - eta * -colSums(snps[,2:1079] * e[,1]) #update weights
b <- b - eta * sum(-e) #update bias
for(k in 1:ncol(weights)){
weights[epoch,k] <- w[k]
}
accuracy <- c(accuracy, length(which(round(y) == t))/30)
}
plot(accuracy, type = "p", main = "Accuracy of prediction")
plot(NA, xlim = c(1,1000), ylim = c(-10, 10), ylab = "weights range", main = "Weights Variation")
for(i in 1:1078){
lines(x = 1:1000, y = weights[,i], col=sample(colors(distinct = T),1), lty=1)
}
cor <- 0.3
source("~/qiulab/cdg/cdg-functions.R")
cor <- 0.3
rows <- seq(100, 1000, 100)
cor <- 0.3
rows <- c(seq(30, 90, 30),seq(100, 1000, 100))
x <- list()
importance_matrix <- list()
for(i in 1:length(rows)){
x[[i]] <- getSimulated(cor, cor, rows[i], 1000)
importance_matrix[[i]] <- runXg.cv(x[[i]])
}
x.master <- getTable(x = x, importance_matrix = importance_matrix, cor = cor)
View(x.master)
source("~/qiulab/cdg/cdg-functions.R")
x <- read.csv("~/qiulab/mskcc-sepsis-resistance/antibioticResistanceNorm.csv", header = TRUE, row.names = 1) #8 antibiotics table
x.snps <- read.csv("~/qiulab/mskcc-sepsis-resistance/processedSNPs.csv", header = TRUE, row.names = 1, stringsAsFactors = F) #snp table
x <- x[-which(rownames(x) == "PA7"),] #remove PA7 b/c it's another species
x.tet25 <- subset(x, select = c(tet25))
rownames(x.snps) <- sapply(strsplit(rownames(x.snps), "_"), "[", 1)
rownames(x.snps)[which(rownames(x.snps) == "PA01")] <- "PAO1"
x.new <- x.snps[row.names(x.snps) %in% row.names(x),]
x.merge <- merge(x.new, x.tet25, by = "row.names")
X <- as.matrix(x.merge[,c(126, 2:125)])
rownames(X) <- x.merge[,1]
X <- X[,-which(colSums(X, na.rm = TRUE) == 30)]
